{
  "name": "mouse",
  "dependencies": [],
  "files": [
    {
      "name": "mouse.ts",
      "content": "import * as React from \"react\"\n\ninterface MouseState {\n  x: number\n  y: number\n  elementX: number\n  elementY: number\n  elementPositionX: number\n  elementPositionY: number\n}\n\nexport function useMouse(): [MouseState, React.RefObject<Element>] {\n  const [state, setState] = React.useState<MouseState>({\n    x: 0,\n    y: 0,\n    elementX: 0,\n    elementY: 0,\n    elementPositionX: 0,\n    elementPositionY: 0,\n  })\n\n  const ref = React.useRef<Element | null>(null)\n\n  React.useLayoutEffect(() => {\n    const handleMouseMove = (event: MouseEvent) => {\n      const newState: Partial<MouseState> = {\n        x: event.pageX,\n        y: event.pageY,\n      }\n\n      if (ref.current instanceof Element) {\n        const { left, top } = ref.current.getBoundingClientRect()\n        const elementPositionX = left + window.scrollX\n        const elementPositionY = top + window.scrollY\n        const elementX = event.pageX - elementPositionX\n        const elementY = event.pageY - elementPositionY\n\n        newState.elementX = elementX\n        newState.elementY = elementY\n        newState.elementPositionX = elementPositionX\n        newState.elementPositionY = elementPositionY\n      }\n\n      setState((s) => ({\n        ...s,\n        ...newState,\n      }))\n    }\n\n    document.addEventListener(\"mousemove\", handleMouseMove)\n\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove)\n    }\n  }, [])\n\n  return [state, ref]\n}\n"
    }
  ],
  "type": "hooks:hook"
}