{
  "name": "battery",
  "dependencies": [],
  "files": [
    {
      "name": "battery.ts",
      "content": "import React from \"react\"\n\nexport interface BatteryState {\n  supported: boolean\n  loading: boolean\n  level: number | null\n  charging: boolean | null\n  chargingTime: number | null\n  dischargingTime: number | null\n}\n\n// Define the BatteryManager interface\nexport interface BatteryManager extends EventTarget {\n  level: number\n  charging: boolean\n  chargingTime: number\n  dischargingTime: number\n  addEventListener(\n    type:\n      | \"levelchange\"\n      | \"chargingchange\"\n      | \"chargingtimechange\"\n      | \"dischargingtimechange\",\n    listener: (this: BatteryManager, ev: Event) => any\n  ): void\n  removeEventListener(\n    type:\n      | \"levelchange\"\n      | \"chargingchange\"\n      | \"chargingtimechange\"\n      | \"dischargingtimechange\",\n    listener: (this: BatteryManager, ev: Event) => any\n  ): void\n}\n\n// Extend Navigator interface to include getBattery method\nexport interface Navigator {\n  getBattery?: () => Promise<BatteryManager>\n}\n\n// Extend window.navigator with the getBattery method\ndeclare const navigator: Navigator\n\nexport function useBattery() {\n  const [state, setState] = React.useState<BatteryState>({\n    supported: true,\n    loading: true,\n    level: null,\n    charging: null,\n    chargingTime: null,\n    dischargingTime: null,\n  })\n\n  React.useEffect(() => {\n    if (!navigator.getBattery) {\n      setState((s) => ({\n        ...s,\n        supported: false,\n        loading: false,\n      }))\n      return\n    }\n\n    let battery: BatteryManager | null = null\n\n    const handleChange = () => {\n      if (battery) {\n        setState({\n          supported: true,\n          loading: false,\n          level: battery.level,\n          charging: battery.charging,\n          chargingTime: battery.chargingTime,\n          dischargingTime: battery.dischargingTime,\n        })\n      }\n    }\n\n    navigator.getBattery().then((b) => {\n      battery = b\n      handleChange()\n\n      b.addEventListener(\"levelchange\", handleChange)\n      b.addEventListener(\"chargingchange\", handleChange)\n      b.addEventListener(\"chargingtimechange\", handleChange)\n      b.addEventListener(\"dischargingtimechange\", handleChange)\n    })\n\n    return () => {\n      if (battery) {\n        battery.removeEventListener(\"levelchange\", handleChange)\n        battery.removeEventListener(\"chargingchange\", handleChange)\n        battery.removeEventListener(\"chargingtimechange\", handleChange)\n        battery.removeEventListener(\"dischargingtimechange\", handleChange)\n      }\n    }\n  }, [])\n\n  return state\n}\n"
    }
  ],
  "type": "hooks:hook"
}