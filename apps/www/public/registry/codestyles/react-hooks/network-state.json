{
  "name": "network-state",
  "dependencies": [],
  "files": [
    {
      "name": "network-state.ts",
      "content": "import * as React from \"react\"\n\ndeclare global {\n  interface Navigator {\n    connection?: NetworkInformation\n    mozConnection?: NetworkInformation\n    webkitConnection?: NetworkInformation\n  }\n}\n\ninterface NetworkInformation extends EventTarget {\n  readonly type?: string\n  readonly effectiveType?: string\n  readonly downlink?: number\n  readonly downlinkMax?: number\n  readonly rtt?: number\n  readonly saveData?: boolean\n  onchange?: (this: NetworkInformation, ev: Event) => any\n  addEventListener(\n    type: \"change\",\n    listener: (this: NetworkInformation, ev: Event) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void\n  removeEventListener(\n    type: \"change\",\n    listener: (this: NetworkInformation, ev: Event) => any,\n    options?: boolean | EventListenerOptions\n  ): void\n}\n\ninterface NetworkState {\n  online: boolean\n  downlink?: number\n  downlinkMax?: number\n  effectiveType?: string\n  rtt?: number\n  saveData?: boolean\n  type?: string\n}\n\nfunction isShallowEqual(\n  object1: Record<string, any>,\n  object2: Record<string, any>\n): boolean {\n  const keys1 = Object.keys(object1)\n  const keys2 = Object.keys(object2)\n\n  if (keys1.length !== keys2.length) {\n    return false\n  }\n\n  for (let key of keys1) {\n    if (object1[key] !== object2[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nconst getConnection = (): NetworkInformation | undefined => {\n  return (\n    navigator?.connection ||\n    navigator?.mozConnection ||\n    navigator?.webkitConnection\n  )\n}\n\nconst useNetworkStateSubscribe = (callback: () => void): (() => void) => {\n  window.addEventListener(\"online\", callback, { passive: true })\n  window.addEventListener(\"offline\", callback, { passive: true })\n\n  const connection = getConnection()\n\n  if (connection) {\n    connection.addEventListener(\"change\", callback, { passive: true })\n  }\n\n  return () => {\n    window.removeEventListener(\"online\", callback)\n    window.removeEventListener(\"offline\", callback)\n\n    if (connection) {\n      connection.removeEventListener(\"change\", callback)\n    }\n  }\n}\n\nconst getNetworkStateServerSnapshot = (): never => {\n  throw Error(\"useNetworkState is a client-only hook\")\n}\n\nexport function useNetworkState(): NetworkState {\n  const cache = React.useRef<NetworkState>({ online: true })\n\n  const getSnapshot = (): NetworkState => {\n    const online = navigator.onLine\n    const connection = getConnection()\n\n    const nextState: NetworkState = {\n      online,\n      downlink: connection?.downlink,\n      downlinkMax: connection?.downlinkMax,\n      effectiveType: connection?.effectiveType,\n      rtt: connection?.rtt,\n      saveData: connection?.saveData,\n      type: connection?.type,\n    }\n\n    if (isShallowEqual(cache.current, nextState)) {\n      return cache.current\n    } else {\n      cache.current = nextState\n      return nextState\n    }\n  }\n\n  return React.useSyncExternalStore(\n    useNetworkStateSubscribe,\n    getSnapshot,\n    getNetworkStateServerSnapshot\n  )\n}\n"
    }
  ],
  "type": "hooks:hook"
}