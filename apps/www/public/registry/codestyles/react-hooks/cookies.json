{
  "name": "cookies",
  "dependencies": [
    "js-cookie"
  ],
  "devDependencies": [
    "@types/js-cookie"
  ],
  "files": [
    {
      "name": "cookies.ts",
      "content": "import { useState } from \"react\"\nimport Cookies from \"js-cookie\"\n\nimport useMemoizedFn from \"./memoized-fn\"\n\nexport const isFunction = (value: unknown): value is (...args: any) => any =>\n  typeof value === \"function\"\n\nexport const isString = (value: unknown): value is string =>\n  typeof value === \"string\"\n\nexport type State = string | undefined\n\nexport interface Options extends Cookies.CookieAttributes {\n  defaultValue?: State | (() => State)\n}\n\nfunction useCookie(cookieKey: string, options: Options = {}) {\n  const [state, setState] = useState<State>(() => {\n    const cookieValue = Cookies.get(cookieKey)\n\n    if (isString(cookieValue)) return cookieValue\n\n    if (isFunction(options.defaultValue)) {\n      return options.defaultValue()\n    }\n\n    return options.defaultValue\n  })\n\n  const updateState = useMemoizedFn(\n    (\n      newValue: State | ((prevState: State) => State),\n      newOptions: Cookies.CookieAttributes = {}\n    ) => {\n      const { defaultValue = \"\", ...restOptions } = {\n        ...options,\n        ...newOptions,\n      }\n      const value = isFunction(newValue) ? newValue(state) : newValue\n\n      setState(value)\n\n      if (value === undefined) {\n        Cookies.remove(cookieKey)\n      } else {\n        Cookies.set(cookieKey, value, restOptions)\n      }\n    }\n  )\n\n  return [state, updateState] as const\n}\n\nexport default useCookie\n"
    },
    {
      "name": "memoized-fn.ts",
      "content": "import { useMemo, useRef } from \"react\"\n\nexport const isFunction = (value: unknown): value is (...args: any) => any =>\n  typeof value === \"function\"\n\nexport const isDev =\n  process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"test\"\n\ntype noop = (this: any, ...args: any[]) => any\n\ntype PickFunction<T extends noop> = (\n  this: ThisParameterType<T>,\n  ...args: Parameters<T>\n) => ReturnType<T>\n\nfunction useMemoizedFn<T extends noop>(fn: T) {\n  if (isDev) {\n    if (!isFunction(fn)) {\n      console.error(\n        `useMemoizedFn expected parameter is a function, got ${typeof fn}`\n      )\n    }\n  }\n\n  const fnRef = useRef<T>(fn)\n\n  // why not write `fnRef.current = fn`?\n  // https://github.com/alibaba/hooks/issues/728\n  fnRef.current = useMemo<T>(() => fn, [fn])\n\n  const memoizedFn = useRef<PickFunction<T>>()\n  if (!memoizedFn.current) {\n    memoizedFn.current = function (this, ...args) {\n      return fnRef.current.apply(this, args)\n    }\n  }\n\n  return memoizedFn.current as T\n}\n\nexport default useMemoizedFn\n"
    }
  ],
  "type": "hooks:hook"
}