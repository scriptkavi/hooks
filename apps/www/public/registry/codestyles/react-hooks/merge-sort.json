{
  "name": "merge-sort",
  "dependencies": [],
  "files": [
    {
      "name": "merge-sort.ts",
      "content": "import { useState, useCallback } from 'react';\n\ninterface UseMergeSortReturn<T> {\n  sortedArray: T[];\n  isSorting: boolean;\n  startSort: (array: T[], comparator?: (a: T, b: T) => number, onComplete?: (sorted: T[]) => void) => void;\n  reset: () => void;\n}\n\nfunction useMergeSort<T = number>(): UseMergeSortReturn<T> {\n  const [sortedArray, setSortedArray] = useState<T[]>([]);\n  const [isSorting, setIsSorting] = useState<boolean>(false);\n\n  // Default comparator\n  const defaultComparator = (a: T, b: T): number => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  };\n\n  const merge = useCallback((left: T[], right: T[], comparator: (a: T, b: T) => number): T[] => {\n    let result: T[] = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    while (leftIndex < left.length && rightIndex < right.length) {\n      if (comparator(left[leftIndex], right[rightIndex]) <= 0) {\n        result.push(left[leftIndex]);\n        leftIndex++;\n      } else {\n        result.push(right[rightIndex]);\n        rightIndex++;\n      }\n    }\n\n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n  }, []);\n\n  const mergeSort = useCallback(\n    (array: T[], comparator: (a: T, b: T) => number): T[] => {\n      if (array.length <= 1) {\n        return array;\n      }\n\n      const middle = Math.floor(array.length / 2);\n      const left = array.slice(0, middle);\n      const right = array.slice(middle);\n\n      return merge(mergeSort(left, comparator), mergeSort(right, comparator), comparator);\n    },\n    [merge]\n  );\n\n  const startSort = useCallback(\n    (array: T[], comparator: (a: T, b: T) => number = defaultComparator, onComplete?: (sorted: T[]) => void) => {\n      if (!Array.isArray(array)) {\n        throw new Error('Input must be an array');\n      }\n      setIsSorting(true);\n      const sorted = mergeSort(array, comparator);\n      setSortedArray(sorted);\n      setIsSorting(false);\n      if (onComplete) onComplete(sorted);\n    },\n    [mergeSort]\n  );\n\n  const reset = useCallback(() => {\n    setSortedArray([]);\n    setIsSorting(false);\n  }, []);\n\n  return {\n    sortedArray,\n    isSorting,\n    startSort,\n    reset,\n  };\n}\n\nexport default useMergeSort;"
    }
  ],
  "type": "hooks:hook"
}