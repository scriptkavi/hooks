{
  "name": "long-press",
  "dependencies": [],
  "files": [
    {
      "name": "long-press.ts",
      "content": "import * as React from \"react\"\n\ninterface LongPressOptions {\n  threshold?: number\n  onStart?: (event: React.MouseEvent | React.TouchEvent) => void\n  onFinish?: (event: React.MouseEvent | React.TouchEvent) => void\n  onCancel?: (event: React.MouseEvent | React.TouchEvent) => void\n}\n\nfunction isTouchEvent(\n  event: React.MouseEvent | React.TouchEvent\n): event is React.TouchEvent {\n  return window.TouchEvent\n    ? event.nativeEvent instanceof TouchEvent\n    : \"touches\" in event.nativeEvent\n}\n\nfunction isMouseEvent(\n  event: React.MouseEvent | React.TouchEvent\n): event is React.MouseEvent {\n  return event.nativeEvent instanceof MouseEvent\n}\n\nexport function useLongPress(\n  callback: (event: React.MouseEvent | React.TouchEvent) => void,\n  options: LongPressOptions = {}\n): {\n  onMouseDown: (event: React.MouseEvent) => void\n  onMouseUp: (event: React.MouseEvent) => void\n  onMouseLeave: (event: React.MouseEvent) => void\n  onTouchStart: (event: React.TouchEvent) => void\n  onTouchEnd: (event: React.TouchEvent) => void\n} {\n  const { threshold = 400, onStart, onFinish, onCancel } = options\n  const isLongPressActive = React.useRef(false)\n  const isPressed = React.useRef(false)\n  const timerId = React.useRef<number | undefined>()\n\n  return React.useMemo(() => {\n    if (typeof callback !== \"function\") {\n      return {} as any\n    }\n\n    const start = (event: React.MouseEvent | React.TouchEvent) => {\n      if (!isMouseEvent(event) && !isTouchEvent(event)) return\n\n      if (onStart) {\n        onStart(event)\n      }\n\n      isPressed.current = true\n      timerId.current = window.setTimeout(() => {\n        callback(event)\n        isLongPressActive.current = true\n      }, threshold)\n    }\n\n    const cancel = (event: React.MouseEvent | React.TouchEvent) => {\n      if (!isMouseEvent(event) && !isTouchEvent(event)) return\n\n      if (isLongPressActive.current) {\n        if (onFinish) {\n          onFinish(event)\n        }\n      } else if (isPressed.current) {\n        if (onCancel) {\n          onCancel(event)\n        }\n      }\n\n      isLongPressActive.current = false\n      isPressed.current = false\n\n      if (timerId.current) {\n        window.clearTimeout(timerId.current)\n      }\n    }\n\n    const mouseHandlers = {\n      onMouseDown: start,\n      onMouseUp: cancel,\n      onMouseLeave: cancel,\n    }\n\n    const touchHandlers = {\n      onTouchStart: start,\n      onTouchEnd: cancel,\n    }\n\n    return {\n      ...mouseHandlers,\n      ...touchHandlers,\n    }\n  }, [callback, threshold, onCancel, onFinish, onStart])\n}\n"
    }
  ],
  "type": "hooks:hook"
}